# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'dialog.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets

import argparse
import os
import sys
from pathlib import Path

import torch
import torch.backends.cudnn as cudnn

import cv2

FILE = Path(__file__).resolve()
ROOT = FILE.parents[0]  # YOLOv5 root directory
if str(ROOT) not in sys.path:
    sys.path.append(str(ROOT))  # add ROOT to PATH
ROOT = Path(os.path.relpath(ROOT, Path.cwd()))  # relative

curr_image = None

from models.common import DetectMultiBackend
from utils.dataloaders import IMG_FORMATS, VID_FORMATS, LoadImages, LoadStreams
from utils.general import (LOGGER, check_file, check_img_size, check_imshow, check_requirements, colorstr, cv2,
                           increment_path, non_max_suppression, print_args, scale_coords, strip_optimizer, xyxy2xywh)
from utils.plots import Annotator, colors, save_one_box
from utils.torch_utils import select_device, time_sync

from PyQt5.QtGui import *
from PyQt5.QtWidgets import *
from PyQt5.QtCore import *

@torch.no_grad()



class ImageDropBox(QtWidgets.QLabel):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setGeometry(QtCore.QRect(290, 150, 311, 271))
        self.setAcceptDrops(True)
        self.setScaledContents(True)

        #mainLayout = QVBoxLayout()

    def dragEnterEvent(self, event):
        if event.mimeData().hasImage:
            event.accept()
        else:
            event.ignore()

    def dragMoveEvent(self, event):
        if event.mimeData().hasImage:
            event.accept()
        else:
            event.ignore()

    def dropEvent(self, event):
        if event.mimeData().hasImage:
            event.setDropAction(Qt.CopyAction)
            file_path = event.mimeData().urls()[0].toLocalFile()
            self.set_image(file_path)

            event.accept()
        else:
            event.ignore()
    def set_image(self, file_path):
        global curr_image
        curr_image = file_path
        self.setPixmap(QPixmap(file_path))
        
class Worker1(QThread):
    opt = ""
    ImageUpdate = pyqtSignal(QImage)
    ImageUpdate2 = pyqtSignal(QImage)
    countarr2 = pyqtSignal(object)
    def run(self,
            weights= 'runs/train/Lots/weights/best.pt',  # model.pt path(s)
            #weights= 'yolov5s.pt',  # model.pt path(s)
            source=0,  # file/dir/URL/glob, 0 for webcam
            data=ROOT / 'data/data.yaml',  # dataset.yaml path
            #data=ROOT / 'data/coco128.yaml',  # dataset.yaml path
            imgsz=(640, 640),  # inference size (height, width)
            conf_thres=0.5,  # confidence threshold
            iou_thres=0.45,  # NMS IOU threshold
            max_det=1000,  # maximum detections per image
            device='',  # cuda device, i.e. 0 or 0,1,2,3 or cpu
            view_img=False,  # show results
            save_txt=False,  # save results to *.txt
            save_conf=False,  # save confidences in --save-txt labels
            save_crop=False,  # save cropped prediction boxes
            nosave=False,  # do not save images/videos
            classes=None,  # filter by class: --class 0, or --class 0 2 3
            agnostic_nms=False,  # class-agnostic NMS
            augment=False,  # augmented inference
            visualize=False,  # visualize features
            update=False,  # update all models
            project=ROOT / 'runs/detect',  # save results to project/name
            name='exp',  # save results to project/name
            exist_ok=False,  # existing project/name ok, do not increment
            line_thickness=3,  # bounding box thickness (pixels)
            hide_labels=False,  # hide labels
            hide_conf=False,  # hide confidences
            half=False,  # use FP16 half-precision inference
            dnn=False,  # use OpenCV DNN for ONNX inference
    ):
        self.ThreadActive = True
        source = str(source)
        save_img = not nosave and not source.endswith('.txt')  # save inference images
        #is_file = Path(source).suffix[1:] in (IMG_FORMATS + VID_FORMATS)
        is_url = source.lower().startswith(('rtsp://', 'rtmp://', 'http://', 'https://'))
        webcam = source.isnumeric() or source.endswith('.txt') #or (is_url and not is_file)
        #if is_url and is_file:
        #    source = check_file(source)  # download

        # Directories
        save_dir = increment_path(Path(project) / name, exist_ok=exist_ok)  # increment run
        (save_dir / 'labels' if save_txt else save_dir).mkdir(parents=True, exist_ok=True)  # make dir

        # Load model
        device = select_device(device)
        model = DetectMultiBackend(weights, device=device, dnn=dnn, data=data, fp16=half)
        stride, names, pt = model.stride, model.names, model.pt
        imgsz = check_img_size(imgsz, s=stride)  # check image size
        
        # Dataloader
        if webcam:
            view_img = check_imshow()
            cudnn.benchmark = True  # set True to speed up constant image size inference
            dataset = LoadStreams(source, img_size=imgsz, stride=stride, auto=pt)
            bs = len(dataset)  # batch_size
        else:
            dataset = LoadImages(source, img_size=imgsz, stride=stride, auto=pt)
            bs = 1  # batch_size
        vid_path, vid_writer = [None] * bs, [None] * bs

        # Run inference
        model.warmup(imgsz=(1 if pt else bs, 3, *imgsz))  # warmup
        dt, seen = [0.0, 0.0, 0.0], 0
        pred3 = ""
        for path, im, im0s, vid_cap, s in dataset:
            t1 = time_sync()
            
            webOn = True
            if webOn:
                #print(im)
                im = torch.from_numpy(im).to(device)
            else:
                global curr_img
                curr = "C:/Users/NakaMura/Downloads/iris-recognition-master (1)/iris-recognition-master/temp"
                #print(curr_image)
                data2 = LoadImages(curr, img_size=imgsz, stride=stride, auto=pt)
                for path1, im1, im0s1, vid_cap1, s1 in data2:
                    im = torch.from_numpy(im1).to(device)
                    path, im0s, vid_cap, s = path1, im0s1, vid_cap1, s1
                
            im = im.half() if model.fp16 else im.float()  # uint8 to fp16/32
            im /= 255  # 0 - 255 to 0.0 - 1.0
            if len(im.shape) == 3:
                im = im[None]  # expand for batch dim
            t2 = time_sync()
            dt[0] += t2 - t1

            # Inference
            visualize = increment_path(save_dir / Path(path).stem, mkdir=True) if visualize else False
            pred = model(im, augment=augment, visualize=visualize)
            t3 = time_sync()
            dt[1] += t3 - t2

            # NMS
            pred = non_max_suppression(pred, conf_thres, iou_thres, classes, agnostic_nms, max_det=max_det)
            dt[2] += time_sync() - t3

            # Second-stage classifier (optional)
            # pred = utils.general.apply_classifier(pred, classifier_model, im, im0s)
            #print(pred)
            # Process predictions
            for i, det in enumerate(pred):  # per image
                seen += 1
                if webcam:  # batch_size >= 1
                    p, im0, frame = path[i], im0s[i].copy(), dataset.count
                    s += f'{i}: '
                else:
                    p, im0, frame = path, im0s.copy(), getattr(dataset, 'frame', 0)
                #im0 = cv2.flip(im0, 1)
                im0 = cv2.cvtColor(im0, cv2.COLOR_BGR2RGB)
                FlippedImage = im0
                #FlippedImage = cv2.flip(im0, 1)
                ConvertToQtFormat = QImage(FlippedImage.data, FlippedImage.shape[1], FlippedImage.shape[0], QImage.Format_RGB888)
                Pic = ConvertToQtFormat.scaled(640, 640, Qt.KeepAspectRatio)
                self.ImageUpdate2.emit(Pic)
                
                p = Path(p)  # to Path
                save_path = str(save_dir / p.name)  # im.jpg
                txt_path = str(save_dir / 'labels' / p.stem) + ('' if dataset.mode == 'image' else f'_{frame}')  # im.txt
                s += '%gx%g ' % im.shape[2:]  # print string
                gn = torch.tensor(im0.shape)[[1, 0, 1, 0]]  # normalization gain whwh
                imc = im0.copy() if save_crop else im0  # for save_crop
                annotator = Annotator(im0, line_width=line_thickness, example=str(names))
                if len(det):
                    # Rescale boxes from img_size to im0 size
                    det[:, :4] = scale_coords(im.shape[2:], det[:, :4], im0.shape).round()

                    # Print results
                    for c in det[:, -1].unique():
                        n = (det[:, -1] == c).sum()  # detections per class
                        s += f"{n} {names[int(c)]}{'s' * (n > 1)}, "  # add to string
                    pred2 = {}
                    # Write results
                    for *xyxy, conf, cls in reversed(det):
                        if save_txt:  # Write to file
                            xywh = (xyxy2xywh(torch.tensor(xyxy).view(1, 4)) / gn).view(-1).tolist()  # normalized xywh
                            line = (cls, *xywh, conf) if save_conf else (cls, *xywh)  # label format
                            with open(f'{txt_path}.txt', 'a') as f:
                                f.write(('%g ' * len(line)).rstrip() % line + '\n')

                        if save_img or save_crop or view_img:  # Add bbox to image
                            c = int(cls)  # integer class
                            label = None if hide_labels else (names[c] if hide_conf else f'{names[c]} {conf:.2f}')
                            #print(str(names[int(c)]) + " " + str(conf))
                            if not names[int(c)] in pred2:
                                pred2[names[int(c)]] = 0
                            pred2[names[int(c)]] += 1
                            annotator.box_label(xyxy, label, color=colors(c, True))
                        if save_crop:
                            save_one_box(xyxy, imc, file=save_dir / 'crops' / names[c] / f'{p.stem}.jpg', BGR=True)
                    labels = ['agaricus abruptibulbus', 'agaricus auricolor', 'agaricus brunneofibrillosus', 'agaricus californicus', 'agaricus crocodilinus', 'agaricus fissuratus', 'agaricus julius', 'agaricus kriegeri', 'agaricus nanaugustus', 'agaricus placomyces', 'Alternaria alternata', 'Bipolaris zeicola', 'Caloboletus inedulis', 'Calostoma cinnabarinum', 'Lycoperdon pulcherrimum', 'Pisolithus arenarius', 'Spongipellis unicolor']
                    
                    len2 = len(labels)
                    countarr = [0] * len(labels)
                    for q in range(0,len2):
                        if labels[q] in pred2:
                            countarr[q] = pred2[labels[q]]
                    print(countarr)
                    self.countarr2.emit(countarr)
                    print(pred2)
                    
                
                # Stream results

                
                im0 = annotator.result()
                global detectedImg
                detectedImg = im0
                
                #FlippedImage = cv2.flip(im0, 1)
                FlippedImage = im0
                ConvertToQtFormat = QImage(FlippedImage.data, FlippedImage.shape[1], FlippedImage.shape[0], QImage.Format_RGB888)
                Pic = ConvertToQtFormat.scaled(640, 640, Qt.KeepAspectRatio)
                self.ImageUpdate.emit(Pic)
                
                if view_img:
                    cv2.imshow(str(p), im0)
                    cv2.waitKey(1)  # 1 millisecond

                # Save results (image with detections)
                if save_img:
                    if dataset.mode == 'image':
                        cv2.imwrite(save_path, im0)
                    else:  # 'video' or 'stream'
                        if vid_path[i] != save_path:  # new video
                            vid_path[i] = save_path
                            if isinstance(vid_writer[i], cv2.VideoWriter):
                                vid_writer[i].release()  # release previous video writer
                            if vid_cap:  # video
                                fps = vid_cap.get(cv2.CAP_PROP_FPS)
                                w = int(vid_cap.get(cv2.CAP_PROP_FRAME_WIDTH))
                                h = int(vid_cap.get(cv2.CAP_PROP_FRAME_HEIGHT))
                            else:  # stream
                                fps, w, h = 30, im0.shape[1], im0.shape[0]
                            save_path = str(Path(save_path).with_suffix('.mp4'))  # force *.mp4 suffix on results videos
                            #vid_writer[i] = cv2.VideoWriter(save_path, cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))
                        #vid_writer[i].write(im0)

            # Print time (inference-only)
            #LOGGER.info(f'{s}Done. ({t3 - t2:.3f}s)')

        # Print results
        t = tuple(x / seen * 1E3 for x in dt)  # speeds per image
        LOGGER.info(f'Speed: %.1fms pre-process, %.1fms inference, %.1fms NMS per image at shape {(1, 3, *imgsz)}' % t)
        if save_txt or save_img:
            s = f"\n{len(list(save_dir.glob('labels/*.txt')))} labels saved to {save_dir / 'labels'}" if save_txt else ''
            LOGGER.info(f"Results saved to {colorstr('bold', save_dir)}{s}")
        if update:
            strip_optimizer(weights)  # update model (to fix SourceChangeWarning)
            
    def parse_opt(self):
        parser = argparse.ArgumentParser()
        parser.add_argument('--weights', nargs='+', type=str, default=ROOT / 'yolov5s.pt', help='model path(s)')
        parser.add_argument('--source', type=str, default=ROOT / 'data/images', help='file/dir/URL/glob, 0 for webcam')
        parser.add_argument('--data', type=str, default=ROOT / 'data/coco128.yaml', help='(optional) dataset.yaml path')
        parser.add_argument('--imgsz', '--img', '--img-size', nargs='+', type=int, default=[640], help='inference size h,w')
        parser.add_argument('--conf-thres', type=float, default=0.25, help='confidence threshold')
        parser.add_argument('--iou-thres', type=float, default=0.45, help='NMS IoU threshold')
        parser.add_argument('--max-det', type=int, default=1000, help='maximum detections per image')
        parser.add_argument('--device', default='', help='cuda device, i.e. 0 or 0,1,2,3 or cpu')
        parser.add_argument('--view-img', action='store_true', help='show results')
        parser.add_argument('--save-txt', action='store_true', help='save results to *.txt')
        parser.add_argument('--save-conf', action='store_true', help='save confidences in --save-txt labels')
        parser.add_argument('--save-crop', action='store_true', help='save cropped prediction boxes')
        parser.add_argument('--nosave', action='store_true', help='do not save images/videos')
        parser.add_argument('--classes', nargs='+', type=int, help='filter by class: --classes 0, or --classes 0 2 3')
        parser.add_argument('--agnostic-nms', action='store_true', help='class-agnostic NMS')
        parser.add_argument('--augment', action='store_true', help='augmented inference')
        parser.add_argument('--visualize', action='store_true', help='visualize features')
        parser.add_argument('--update', action='store_true', help='update all models')
        parser.add_argument('--project', default=ROOT / 'runs/detect', help='save results to project/name')
        parser.add_argument('--name', default='exp', help='save results to project/name')
        parser.add_argument('--exist-ok', action='store_true', help='existing project/name ok, do not increment')
        parser.add_argument('--line-thickness', default=3, type=int, help='bounding box thickness (pixels)')
        parser.add_argument('--hide-labels', default=False, action='store_true', help='hide labels')
        parser.add_argument('--hide-conf', default=False, action='store_true', help='hide confidences')
        parser.add_argument('--half', action='store_true', help='use FP16 half-precision inference')
        parser.add_argument('--dnn', action='store_true', help='use OpenCV DNN for ONNX inference')
        opt = parser.parse_args()
        opt.imgsz *= 2 if len(opt.imgsz) == 1 else 1  # expand
        print_args(vars(opt))
        return opt

        
class Ui_Dialog(object):        
    col, row = 3, 5
    def setTable1(self):
        col, row = self.col, self.row
        print(col, row)
        self.tableWidget.setRowCount(0)
        
        headers = ["Labels", "Count"]
        self.tableWidget.setColumnCount(len(headers))
        self.tableWidget.setHorizontalHeaderLabels(headers)
        #for x in range(len(headers)):
        #    self.tableWidget.insertColumn(headers[x])
        labels = ['agaricus abruptibulbus', 'agaricus auricolor', 'agaricus brunneofibrillosus', 'agaricus californicus', 'agaricus crocodilinus', 'agaricus fissuratus', 'agaricus julius', 'agaricus kriegeri', 'agaricus nanaugustus', 'agaricus placomyces', 'Alternaria alternata', 'Bipolaris zeicola', 'Caloboletus inedulis', 'Calostoma cinnabarinum', 'Lycoperdon pulcherrimum', 'Pisolithus arenarius', 'Spongipellis unicolor']
        row = len(labels)
        for y in range(row):
            self.tableWidget.insertRow(y)
        for y in range(row):
            item = QtWidgets.QTableWidgetItem(labels[y])
            item.setFlags( QtCore.Qt.ItemIsSelectable |  QtCore.Qt.ItemIsEnabled)
            self.tableWidget.setItem(y, 0, item)
            #self.tableWidget.setCellWidget(y, x, new self.label)

        for y in range(row):
            item = QtWidgets.QTableWidgetItem("0")
            item.setFlags( QtCore.Qt.ItemIsSelectable |  QtCore.Qt.ItemIsEnabled | QtCore.Qt.ItemIsEditable)
            self.tableWidget.setItem(y, 1, item)
            #self.tableWidget.setCellWidget(y, x, new self.label)
        #self.tableWidget.setSizeAdjustPolicy(QtWidgets.QAbstractScrollArea.AdjustToContents)
        horizontalHeader = self.tableWidget.horizontalHeader()
        # resize the first column to 100 pixels
        horizontalHeader.resizeSection(0, 180)
        horizontalHeader.setSectionResizeMode(
            1, QtWidgets.QHeaderView.Stretch)
        #for y in range(row):
        #    for x in range(col):
        #        self.tableWidget.setCellWidget(y, x, self.tableWidget)
        
    def updateTable2(self, count):
        len2 = len(count)
        for y in range(0,len2):
            item = QtWidgets.QTableWidgetItem(str(count[y]))
            item.setFlags( QtCore.Qt.ItemIsSelectable |  QtCore.Qt.ItemIsEnabled)
            self.tableWidget_2.setItem(y, 1, item)
    def setTable2(self):
        col, row = self.col, self.row
        print(col, row)
        self.tableWidget_2.setRowCount(0)
        
        headers = ["Labels", "Count"]
        self.tableWidget_2.setColumnCount(len(headers))
        self.tableWidget_2.setHorizontalHeaderLabels(headers)
        #for x in range(len(headers)):
        #    self.tableWidget_2.insertColumn(headers[x])
        labels = ['agaricus abruptibulbus', 'agaricus auricolor', 'agaricus brunneofibrillosus', 'agaricus californicus', 'agaricus crocodilinus', 'agaricus fissuratus', 'agaricus julius', 'agaricus kriegeri', 'agaricus nanaugustus', 'agaricus placomyces', 'Alternaria alternata', 'Bipolaris zeicola', 'Caloboletus inedulis', 'Calostoma cinnabarinum', 'Lycoperdon pulcherrimum', 'Pisolithus arenarius', 'Spongipellis unicolor']
        row = len(labels)
        for y in range(row):
            self.tableWidget_2.insertRow(y)
        for y in range(row):
            item = QtWidgets.QTableWidgetItem(labels[y])
            item.setFlags( QtCore.Qt.ItemIsSelectable |  QtCore.Qt.ItemIsEnabled)
            self.tableWidget_2.setItem(y, 0, item)
            #self.tableWidget_2.setCellWidget(y, x, new self.label)

        for y in range(row):
            item = QtWidgets.QTableWidgetItem("0")
            item.setFlags( QtCore.Qt.ItemIsSelectable |  QtCore.Qt.ItemIsEnabled)
            self.tableWidget_2.setItem(y, 1, item)
            #self.tableWidget_2.setCellWidget(y, x, new self.label)
        #self.tableWidget_2.setSizeAdjustPolicy(QtWidgets.QAbstractScrollArea.AdjustToContents)
        horizontalHeader = self.tableWidget_2.horizontalHeader()
        # resize the first column to 100 pixels
        horizontalHeader.resizeSection(0, 180)
        horizontalHeader.setSectionResizeMode(
            1, QtWidgets.QHeaderView.Stretch)
        #for y in range(row):
        #    for x in range(col):
        #        self.tableWidget_2.setCellWidget(y, x, self.tableWidget_2)
    def initializeWidget(self):
        self.setTable1()
        self.setTable2()
        check_requirements(exclude=('tensorboard', 'thop'))
        import sys
        #opt = self.parse_opt()
        
        self.Worker1 = Worker1()

        self.Worker1.start()
        self.Worker1.ImageUpdate.connect(self.ImageUpdateSlot)
        self.Worker1.ImageUpdate2.connect(self.ImageUpdateSlot2)
        self.Worker1.countarr2.connect(self.updateTable2)

    def ImageUpdateSlot(self, Image):
        self.label_2.setPixmap(QPixmap.fromImage(Image))
        
    def ImageUpdateSlot2(self, Image):
        self.label_3.setPixmap(QPixmap.fromImage(Image))
        
    def setupUIAdditions(self):
        self.initializeWidget()
        
    def setupUi(self, Dialog):
        Dialog.setObjectName("Dialog")
        Dialog.resize(1262, 542)
        Dialog.setStyleSheet("background-color: rgb(42, 42, 42);")
        self.filename = QtWidgets.QLineEdit(Dialog)
        self.filename.setGeometry(QtCore.QRect(290, 120, 221, 21))
        self.filename.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.filename.setObjectName("filename")
        self.browse = QtWidgets.QPushButton(Dialog)
        self.browse.setGeometry(QtCore.QRect(520, 120, 81, 20))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(15)
        self.browse.setFont(font)
        self.browse.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.browse.setObjectName("browse")
        self.lblInput = QtWidgets.QLabel(Dialog)
        self.lblInput.setGeometry(QtCore.QRect(410, 90, 101, 16))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        font.setKerning(True)
        self.lblInput.setFont(font)
        self.lblInput.setStyleSheet("color: rgb(255, 255, 255);\n"
"")
        self.lblInput.setAlignment(QtCore.Qt.AlignCenter)
        self.lblInput.setObjectName("lblInput")
        self.label_2 = QtWidgets.QLabel(Dialog)
        self.label_2.setGeometry(QtCore.QRect(660, 150, 311, 271))
        self.label_2.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.label_2.setText("")
        self.label_2.setObjectName("label_2")
        self.label_2.setScaledContents(True)
        self.lblOutput = QtWidgets.QLabel(Dialog)
        self.lblOutput.setGeometry(QtCore.QRect(730, 90, 151, 20))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        font.setKerning(True)
        self.lblOutput.setFont(font)
        self.lblOutput.setStyleSheet("color: rgb(255, 255, 255);\n"
"")
        self.lblOutput.setAlignment(QtCore.Qt.AlignCenter)
        self.lblOutput.setObjectName("lblOutput")
        self.browse_2 = QtWidgets.QPushButton(Dialog)
        self.browse_2.setGeometry(QtCore.QRect(580, 440, 111, 31))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(15)
        self.browse_2.setFont(font)
        self.browse_2.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.browse_2.setObjectName("browse_2")
        self.label_3 = ImageDropBox(Dialog)
        self.label_3.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.label_3.setText("")
        self.label_3.setObjectName("label_3")
        self.label_3.setScaledContents(True)
        self.lblInput_3 = QtWidgets.QLabel(Dialog)
        self.lblInput_3.setGeometry(QtCore.QRect(660, 120, 311, 16))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(13)
        font.setBold(True)
        font.setWeight(75)
        font.setKerning(True)
        self.lblInput_3.setFont(font)
        self.lblInput_3.setStyleSheet("color: rgb(255, 255, 255);\n"
"")
        self.lblInput_3.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.lblInput_3.setObjectName("lblInput_3")
        self.lblInput_4 = QtWidgets.QLabel(Dialog)
        self.lblInput_4.setGeometry(QtCore.QRect(320, 30, 621, 20))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        font.setKerning(True)
        self.lblInput_4.setFont(font)
        self.lblInput_4.setStyleSheet("color: rgb(255, 255, 255);\n"
"")
        self.lblInput_4.setAlignment(QtCore.Qt.AlignCenter)
        self.lblInput_4.setObjectName("lblInput_4")
        self.tableWidget = QtWidgets.QTableWidget(Dialog)
        self.tableWidget.setGeometry(QtCore.QRect(20, 150, 256, 271))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        self.tableWidget.setPalette(palette)
        self.tableWidget.setAutoFillBackground(True)
        self.tableWidget.setStyleSheet("background-color: white")
        self.tableWidget.setSizeAdjustPolicy(QtWidgets.QAbstractScrollArea.AdjustToContentsOnFirstShow)
        self.tableWidget.setAlternatingRowColors(True)
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setColumnCount(0)
        self.tableWidget.setRowCount(0)
        self.lblInput_2 = QtWidgets.QLabel(Dialog)
        self.lblInput_2.setGeometry(QtCore.QRect(60, 90, 181, 16))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        font.setKerning(True)
        self.lblInput_2.setFont(font)
        self.lblInput_2.setStyleSheet("color: rgb(255, 255, 255);\n"
"")
        self.lblInput_2.setAlignment(QtCore.Qt.AlignCenter)
        self.lblInput_2.setObjectName("lblInput_2")
        self.lblInput_5 = QtWidgets.QLabel(Dialog)
        self.lblInput_5.setGeometry(QtCore.QRect(60, 120, 181, 16))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        font.setKerning(True)
        self.lblInput_5.setFont(font)
        self.lblInput_5.setStyleSheet("color: rgb(255, 255, 255);\n"
"")
        self.lblInput_5.setAlignment(QtCore.Qt.AlignCenter)
        self.lblInput_5.setObjectName("lblInput_5")
        self.lblInput_6 = QtWidgets.QLabel(Dialog)
        self.lblInput_6.setGeometry(QtCore.QRect(1030, 90, 181, 16))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        font.setKerning(True)
        self.lblInput_6.setFont(font)
        self.lblInput_6.setStyleSheet("color: rgb(255, 255, 255);\n"
"")
        self.lblInput_6.setAlignment(QtCore.Qt.AlignCenter)
        self.lblInput_6.setObjectName("lblInput_6")
        self.lblInput_7 = QtWidgets.QLabel(Dialog)
        self.lblInput_7.setGeometry(QtCore.QRect(1030, 120, 181, 16))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        font.setKerning(True)
        self.lblInput_7.setFont(font)
        self.lblInput_7.setStyleSheet("color: rgb(255, 255, 255);\n"
"")
        self.lblInput_7.setAlignment(QtCore.Qt.AlignCenter)
        self.lblInput_7.setObjectName("lblInput_7")
        self.tableWidget_2 = QtWidgets.QTableWidget(Dialog)
        self.tableWidget_2.setGeometry(QtCore.QRect(990, 150, 256, 271))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        self.tableWidget_2.setPalette(palette)
        self.tableWidget_2.setAutoFillBackground(True)
        self.tableWidget_2.setStyleSheet("background-color: white")
        self.tableWidget_2.setSizeAdjustPolicy(QtWidgets.QAbstractScrollArea.AdjustToContentsOnFirstShow)
        self.tableWidget_2.setAlternatingRowColors(True)
        self.tableWidget_2.setObjectName("tableWidget_2")
        self.tableWidget_2.setColumnCount(0)
        self.tableWidget_2.setRowCount(0)

        self.retranslateUi(Dialog)
        QtCore.QMetaObject.connectSlotsByName(Dialog)
        
        self.setupUIAdditions()

    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "Dialog"))
        self.browse.setText(_translate("Dialog", "Browse"))
        self.lblInput.setText(_translate("Dialog", "I N P U T"))
        self.lblOutput.setText(_translate("Dialog", "O U T P U T"))
        self.browse_2.setText(_translate("Dialog", "Process"))
        self.lblInput_3.setText(_translate("Dialog", "Fungi Label: Sample"))
        self.lblInput_4.setText(_translate("Dialog", "Microbe Counter"))
        self.lblInput_2.setText(_translate("Dialog", "E X P E C T E D"))
        self.lblInput_5.setText(_translate("Dialog", "C O U N T"))
        self.lblInput_6.setText(_translate("Dialog", "R E S U L T"))
        self.lblInput_7.setText(_translate("Dialog", "C O U N T"))


    
if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    Dialog = QtWidgets.QDialog()
    ui = Ui_Dialog()
    ui.setupUi(Dialog)
    Dialog.show()
    sys.exit(app.exec_())
